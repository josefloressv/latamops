# This Workflow is used to deploy the App NodeJS. 
# 
# To use this workflow, you must configure the following GHA Secrets:
# AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, NEW_RELIC_LICENSE_KEY
# in two environments: dev and prod
#
# and then run the workflow from the UI
# 

name: 04 NodeJS app
on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
    inputs:
      environment:
        description: 'Environment'     
        required: true
        type: string

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'     
        required: true
        type: environment

env:
  AWS_DEFAULT_REGION: us-east-1
  CLUSTER_NAME: cluster-app-${{ inputs.environment }}
  SERVICE_NAME: app01-${{ inputs.environment }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
        
    - name: Get AWS Account Number
      run: echo "AWS_ACCOUNT_NUMBER=$(aws sts get-caller-identity --query 'Account' --output text)" >> $GITHUB_ENV

    - name: ECR Login
      run: |
        docker login --username AWS --password $(aws ecr get-login-password --region ${{ env.AWS_DEFAULT_REGION }}) ${{ env.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com

    - name: Build
      run: |
        cd app
        docker build -t app01-${{ inputs.environment }} --build-arg NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }} .

    - name: Tag
      run: |
        docker tag app01-${{ inputs.environment }}:latest ${{ env.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/app01-${{ inputs.environment }}:latest

    - name: Push
      run: |
        docker push ${{ env.AWS_ACCOUNT_NUMBER }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/app01-${{ inputs.environment }}:latest

    - name: Create ECS deployment
      run: |
        aws ecs update-service --service ${{ env.SERVICE_NAME }} --cluster ${{ env.CLUSTER_NAME }} --desired-count 2 --force-new-deployment

